# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import sc_pb2 as sc__pb2


class SchedulerControllerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.KeepAlive = channel.unary_unary(
                '/scheduler_controller.SchedulerController/KeepAlive',
                request_serializer=sc__pb2.KeepAliveRequest.SerializeToString,
                response_deserializer=sc__pb2.KeepAliveReply.FromString,
                )
        self.InputWorkflow = channel.unary_unary(
                '/scheduler_controller.SchedulerController/InputWorkflow',
                request_serializer=sc__pb2.InputWorkflowRequest.SerializeToString,
                response_deserializer=sc__pb2.InputWorkflowReply.FromString,
                )
        self.FetchWorkflowIDList = channel.unary_unary(
                '/scheduler_controller.SchedulerController/FetchWorkflowIDList',
                request_serializer=sc__pb2.WorkflowIDListRequest.SerializeToString,
                response_deserializer=sc__pb2.WorkflowIDListReply.FromString,
                )
        self.GetWorkflowByID = channel.unary_unary(
                '/scheduler_controller.SchedulerController/GetWorkflowByID',
                request_serializer=sc__pb2.GetWorkflowByIdRequest.SerializeToString,
                response_deserializer=sc__pb2.GetWorkflowByIdReply.FromString,
                )
        self.RegisterResourceAllocator = channel.unary_unary(
                '/scheduler_controller.SchedulerController/RegisterResourceAllocator',
                request_serializer=sc__pb2.RegisterRARequest.SerializeToString,
                response_deserializer=sc__pb2.RegisterRAReply.FromString,
                )
        self.GetWorkflowPhaseByCustomID = channel.unary_unary(
                '/scheduler_controller.SchedulerController/GetWorkflowPhaseByCustomID',
                request_serializer=sc__pb2.GetWorkflowPhaseByCustomIDRequest.SerializeToString,
                response_deserializer=sc__pb2.GetWorkflowPhaseByCustomIDReply.FromString,
                )
        self.DeleteWorkflow = channel.unary_unary(
                '/scheduler_controller.SchedulerController/DeleteWorkflow',
                request_serializer=sc__pb2.DeleteWorkflowRequest.SerializeToString,
                response_deserializer=sc__pb2.DeleteWorkflowReply.FromString,
                )


class SchedulerControllerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def KeepAlive(self, request, context):
        """调度器内保活器向调度器控制器发送保活信号
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InputWorkflow(self, request, context):
        """前端输入工作流
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchWorkflowIDList(self, request, context):
        """导出工作流ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWorkflowByID(self, request, context):
        """选择某一个工作流查看DAG
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterResourceAllocator(self, request, context):
        """注册资源分配器
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWorkflowPhaseByCustomID(self, request, context):
        """获取工作流当前状态
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteWorkflow(self, request, context):
        """删除工作流
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SchedulerControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'KeepAlive': grpc.unary_unary_rpc_method_handler(
                    servicer.KeepAlive,
                    request_deserializer=sc__pb2.KeepAliveRequest.FromString,
                    response_serializer=sc__pb2.KeepAliveReply.SerializeToString,
            ),
            'InputWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.InputWorkflow,
                    request_deserializer=sc__pb2.InputWorkflowRequest.FromString,
                    response_serializer=sc__pb2.InputWorkflowReply.SerializeToString,
            ),
            'FetchWorkflowIDList': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchWorkflowIDList,
                    request_deserializer=sc__pb2.WorkflowIDListRequest.FromString,
                    response_serializer=sc__pb2.WorkflowIDListReply.SerializeToString,
            ),
            'GetWorkflowByID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWorkflowByID,
                    request_deserializer=sc__pb2.GetWorkflowByIdRequest.FromString,
                    response_serializer=sc__pb2.GetWorkflowByIdReply.SerializeToString,
            ),
            'RegisterResourceAllocator': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterResourceAllocator,
                    request_deserializer=sc__pb2.RegisterRARequest.FromString,
                    response_serializer=sc__pb2.RegisterRAReply.SerializeToString,
            ),
            'GetWorkflowPhaseByCustomID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWorkflowPhaseByCustomID,
                    request_deserializer=sc__pb2.GetWorkflowPhaseByCustomIDRequest.FromString,
                    response_serializer=sc__pb2.GetWorkflowPhaseByCustomIDReply.SerializeToString,
            ),
            'DeleteWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteWorkflow,
                    request_deserializer=sc__pb2.DeleteWorkflowRequest.FromString,
                    response_serializer=sc__pb2.DeleteWorkflowReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'scheduler_controller.SchedulerController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SchedulerController(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def KeepAlive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scheduler_controller.SchedulerController/KeepAlive',
            sc__pb2.KeepAliveRequest.SerializeToString,
            sc__pb2.KeepAliveReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InputWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scheduler_controller.SchedulerController/InputWorkflow',
            sc__pb2.InputWorkflowRequest.SerializeToString,
            sc__pb2.InputWorkflowReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchWorkflowIDList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scheduler_controller.SchedulerController/FetchWorkflowIDList',
            sc__pb2.WorkflowIDListRequest.SerializeToString,
            sc__pb2.WorkflowIDListReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWorkflowByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scheduler_controller.SchedulerController/GetWorkflowByID',
            sc__pb2.GetWorkflowByIdRequest.SerializeToString,
            sc__pb2.GetWorkflowByIdReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterResourceAllocator(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scheduler_controller.SchedulerController/RegisterResourceAllocator',
            sc__pb2.RegisterRARequest.SerializeToString,
            sc__pb2.RegisterRAReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWorkflowPhaseByCustomID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scheduler_controller.SchedulerController/GetWorkflowPhaseByCustomID',
            sc__pb2.GetWorkflowPhaseByCustomIDRequest.SerializeToString,
            sc__pb2.GetWorkflowPhaseByCustomIDReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scheduler_controller.SchedulerController/DeleteWorkflow',
            sc__pb2.DeleteWorkflowRequest.SerializeToString,
            sc__pb2.DeleteWorkflowReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
